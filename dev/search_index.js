var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = SimpleMock","category":"page"},{"location":"#SimpleMock-1","page":"Home","title":"SimpleMock","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"SimpleMock\nmock\nMock\ncalls\nncalls\ncalled\ncalled_once\ncalled_with\ncalled_once_with\nCall\nhas_call\nhas_calls\nreset!","category":"page"},{"location":"#SimpleMock.SimpleMock","page":"Home","title":"SimpleMock.SimpleMock","text":"A basic mocking module, inspired by Python's unittest.mock and implemented with Cassette.\n\nUsage\n\nFor usage examples, see mock.\n\nDifferences from unittest.mock\n\nSimpleMock only implements mocking of function calls, as opposed to arbitrary monkey-patching.\nNeither getfield nor setfield! is not implemented for the default Mock object.\n\n\n\n\n\n","category":"module"},{"location":"#SimpleMock.mock","page":"Home","title":"SimpleMock.mock","text":"mock(f::Function[, ctx::Symbol], args...)\n\nRun f with specified functions replaced with Mocks.\n\nwarning: Warning\nThere are a few issues with this function, see them on GitHub.\n\nExamples\n\nMocking a single function:\n\nmock(get) do get\n    Base.get(1)  # Would normally throw a `MethodError`.\n    @assert called_once_with(get, 1)\nend\n\nMocking a function with a custom Mock:\n\nmock(get => Mock(; return_value=1)) do get\n    @assert Base.get(1) == 1\n    @assert called_once_with(get, 1)\nend\n\nReusing A Context\n\nTODO: doc about reusing Context types.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.Mock","page":"Home","title":"SimpleMock.Mock","text":"Mock(; return_value=Mock(), side_effect=nothing)\n\nCreate a new mocking object, which behaves similarly to Python's Mock.\n\nReturn Value\n\nUse the return_value keyword to set the value to be returned upon calling the mock. By default, the return value is a new Mock.\n\nSide Effects\n\nUse the side_effect keyword to set a side effect to occur upon calling the mock.\n\nIf the value is an Exception, then the exception is thrown.\nIf the value is a function, then it is called with the same arguments and keywords.\nIf the value is a Vector, then each call uses the next element.\nAny other value is returned without modification.\n\n\n\n\n\n","category":"type"},{"location":"#SimpleMock.calls","page":"Home","title":"SimpleMock.calls","text":"calls(::Mock) -> Vector{Call}\n\nReturn the call history of the Mock.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.ncalls","page":"Home","title":"SimpleMock.ncalls","text":"ncalls(::Mock) -> Int\n\nReturn the number of times that the Mock has been called.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.called","page":"Home","title":"SimpleMock.called","text":"called(::Mock) -> Bool\n\nReturn whether or not the Mock has been called.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.called_once","page":"Home","title":"SimpleMock.called_once","text":"called_once(::Mock) -> Bool\n\nReturn whether or not the Mock has been called exactly once.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.called_with","page":"Home","title":"SimpleMock.called_with","text":"called_with(::Mock, args...; kwargs...) -> Bool\n\nReturn whether or not the Mock has been called with the given arguments.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.called_once_with","page":"Home","title":"SimpleMock.called_once_with","text":"called_once_with(::Mock, args...; kwargs...) -> Bool\n\nReturn whether or not the Mock has been called exactly once with the given arguments.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.Call","page":"Home","title":"SimpleMock.Call","text":"Call(args...; kwargs...)\n\nRepresents a function call.\n\n\n\n\n\n","category":"type"},{"location":"#SimpleMock.has_call","page":"Home","title":"SimpleMock.has_call","text":"has_call(::Mock, ::Call) -> Bool\n\nSimiliar to called_with, but using a Call.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.has_calls","page":"Home","title":"SimpleMock.has_calls","text":"has_calls(::Mock, ::Calls...) -> Bool\n\nReturn whether or not the Mock has a particular ordered sequence of Calls.\n\n\n\n\n\n","category":"function"},{"location":"#SimpleMock.reset!","page":"Home","title":"SimpleMock.reset!","text":"reset!(::Mock)\n\nReset a Mock's call history and internal variables. Side effects and return values are preserved.\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
